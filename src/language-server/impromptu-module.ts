import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices,
    ScopeComputation,
    ScopeProvider
} from 'langium';
import { ImpromptuGeneratedModule, ImpromptuGeneratedSharedModule } from './generated/module';
import { ImpromptuValidator, registerValidationChecks } from './impromptu-validator';
import { ImpromptuScopeComputation, ScopeParamProvider } from './impromptu-scope';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ImpromptuAddedServices = {
    validation: {
        ImpromptuValidator: ImpromptuValidator
    }
    
    references:{
        ScopeProvider: ScopeProvider,
        ScopeComputation: ScopeComputation
    }
        
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ImpromptuServices = LangiumServices & ImpromptuAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ImpromptuModule: Module<ImpromptuServices, PartialLangiumServices & ImpromptuAddedServices> = {
    validation: {
        ImpromptuValidator: () => new ImpromptuValidator()
    },
    references: {
        ScopeComputation: (services) => new ImpromptuScopeComputation(services),
        ScopeProvider: (services) => new ScopeParamProvider(services)
    }
        
};



/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createImpromptuServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Impromptu: ImpromptuServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ImpromptuGeneratedSharedModule
    );
    const Impromptu = inject(
        createDefaultModule({ shared }),
        ImpromptuGeneratedModule,
        ImpromptuModule
    );
    shared.ServiceRegistry.register(Impromptu);
    registerValidationChecks(Impromptu);
    return { shared, Impromptu };
}
